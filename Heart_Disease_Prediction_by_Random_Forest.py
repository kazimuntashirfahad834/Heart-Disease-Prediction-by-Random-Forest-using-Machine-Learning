# -*- coding: utf-8 -*-
"""Heart Disease Prediction by Random Forest

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YSSybwmcHF01FF75zxsXh-DoPV3DfQqb

<h1>A Machine Learning Approach to predict heart disease by using Random Forest</h1>

<h2>Declare Libraries that is needed for the project</h2>
"""

import pandas as pd # Needed For Various Python Built-in Functions
from sklearn.model_selection import train_test_split # Used to Split the dataset into train_dataset and test_dataset
from sklearn.preprocessing import StandardScaler # Needed to ensures that all of the features are given equal importance during modeling
from sklearn.ensemble import RandomForestClassifier # It is the ML model that we are going to train and used for this project 
from sklearn.metrics import confusion_matrix # Used for model evaluation, that means in depth details of testing and generates accuracy for the model
from sklearn.calibration import calibration_curve # Used to Plot the Prediction Result of a binary classifier Trained Model
import seaborn as sns # Used to Plot the Heatmap of the Co-Relation Diagram
import matplotlib.pyplot as plt # Used to declare the the figure or frame size

"""<h2>Load The dataset</h2>"""

data = pd.read_csv('/content/drive/MyDrive/DATASETS/MACHINE _LEARNING/heart_disease_data.csv')
df = data

"""<h2>Data Pre-Processing</h2>

<h3>Dataset Shape</h3>
"""

df.shape

"""<h3>Summery of the Dataset (eg. data-types mean modes)</h3>"""

df.describe()

"""<h3>Data types of all Attributes</h3>"""

data_types = df.dtypes
data_types

"""<h3>Attribute Names (is there any proble or not)</h3>"""

col_names = df.columns.tolist()
col_names

"""<h3>Head of the Dataset</h3>"""

df.head()

"""<h3>Find out the Categorical Attributes of the Dataset</h3>"""

for col in df.columns:
    print(f'Unique values for {col}:')
    print(df[col].unique())
    print('---')

"""<h2>Co-Relation</h2>

<h3>Pair-Plot</h3>
"""

sns.set(style='ticks')
sns.pairplot(df, vars=['cp', 'thalach', 'slope', 'exang', 'oldpeak', 'ca', 'thal', 'sex', 'age'], kind='scatter')
plt.show()

"""<h3>Heatmap</h3>"""

corr_matrix = data.corr() # create a correlation matrix
plt.figure(figsize=(12, 12))
cmap = sns.diverging_palette(10, 220, as_cmap=True) # define a custom diverging color palette with red for negative values and blue for positive values
sns.heatmap(corr_matrix, annot=True, cmap=cmap, linewidths=0.1, linecolor='white', fmt='.2f', center=0, square=True, cbar=True, cbar_kws={'orientation': 'horizontal'}) # create a heatmap with colorbar and annotations

"""<h2>Feature Selection</h2>
Selected Features : cp, thalach, slope, exang, oldpeak, ca, thal, sex, age
"""

# Separate the features and target variable
X = df.drop(['trestbps', 'target', 'chol',  'restecg', 'fbs'], axis=1)
y = df['target']

"""<h2>Dataset Spliting For training and Testing</h2>"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # 80% Training and 20% Testing
# Preprocess the data by scaling the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""<h2>Model Training</h2>"""

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

"""<h2>Model Testing</h2>"""

y_pred = rf_model.predict(X_test)

"""<h3>Creating The Consuion Matrix</h3>"""

cm = confusion_matrix(y_test, y_pred)
tn, fp, fn, tp = cm.ravel()
print("True Positives:", tp)
print("False Positives:", fp)
print("True Negatives:", tn)
print("False Negatives:", fn)
print("\n\n")
cm

"""<h3>Model Accuracy</h3>"""

# Accuracy = (TP + TN) / (TP + TN + FP + FN) # Equation
accuracy = (cm[0,0] + cm[1,1]) / sum(sum(cm)) # Calculate the overall accuracy from confusion matrix
print("Overall Accuracy:", accuracy)
print("Overall Accuracy (in percentage):", (accuracy*100))

"""<h2>
Graphical Representation of the Result
</h2>

<h3>Plot Confusion-Matrix</h3>
"""

# Plot the confusion matrix using Seaborn
sns.heatmap(cm, annot=True, cmap='Blues')

# Add labels and title
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')

# Display the plot
plt.show()

"""<h3>Calibration Plot</h3>
<h4>Original Result VS Predicted Result</h4>
<h5>Distortion of Predicted Result from Actual Result</h5>
"""

# y_test contains actual values, y_pred contains predicted probabilities
prob_true, prob_pred = calibration_curve(y_test, y_pred, n_bins=10)

# plot the calibration curve
plt.plot(prob_pred, prob_true, marker='o', markersize=5, label='Model')

plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r', label='Perfectly calibrated')

plt.xlabel('Predicted probability')
plt.ylabel('True probability in each bin')
plt.title('Calibration Plot')
plt.legend(loc="lower right")
plt.show()

"""<h3>Density Plot</h3>
<h4>Actual VS Predicted</h4>
"""

sns.kdeplot(y_pred, fill=True)
plt.xlabel('Predicted Values')
plt.ylabel('Density')
plt.show()